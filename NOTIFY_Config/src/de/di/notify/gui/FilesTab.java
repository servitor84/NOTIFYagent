package de.di.notify.gui;

//import de.arivato.notify.gui.TaskList;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Locale;
import java.util.Properties;
import java.util.ResourceBundle;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionListener;
import org.apache.commons.io.FileUtils;
import de.di.uigenerator.JPanelEnableSave;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 *
 * @author Emal Rahman
 */
public class FilesTab extends javax.swing.JPanel implements ConfigTab, ListSelectionListener {

    public static boolean fieldSet = true;
    private static JPanelEnableSave activePanel;
    DefaultListModel mod = new DefaultListModel();
    private static final String actuelProfileAddress = "";
    private Properties properties = new Properties();
    private Config config = null;
    private String title = "Files";
    public static String seclectedProfileNumber;
    public static HashMap<Integer, String> idxToFiles = new HashMap<Integer, String>();
    public static Set<String> profileNames = new HashSet<String>();
    public static String currentProfile;
    Properties defaultValues = new Properties();
    
    private static ResourceBundle right_bundle;

    /**
     * Creates new form FilesTabLast
     */
    public FilesTab() {
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(de.di.notify.gui.ConfigApp.class).getContext().getResourceMap(FilesTab.class);
        title = resourceMap.getString("tabTitle.text");
        initComponents();
        loadResources();
        if (getActuallyProfileNumber() >= getAllowedProfileNumber()) {
            jButton6.setEnabled(false);
        }
        showProfileInList();
        initDefaultValues();
    }

    private void initDefaultValues() {
        defaultValues.setProperty("ProfileName", "");

    }

    public void loadResources() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
        }
        SwingUtilities.updateComponentTreeUI(this);
        Locale locale = Locale.getDefault();
                
        try {            
            right_bundle = ResourceBundle.getBundle("notify/de/di/notify/gui/resources/FilesTab", locale);
        } catch (Exception ex) {
            right_bundle = ResourceBundle.getBundle("contractmanager/de/di/notify/gui/resources/FilesTab", locale);
        }
        
        ResourceBundle bundle = right_bundle; //ResourceBundle.getBundle("notify/de/di/notify/gui/resources/FilesTab", locale);
        jLabel1.setText(bundle.getString("jLabel1.text"));
        jButton6.setText(bundle.getString("jButton1.text"));
    }

    private int getAllowedProfileNumber() {
        Properties prop = new Properties();
        try {
            prop.load(new FileInputStream("../conf/license.txt"));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "The license for NOTIFYagent can not be found");
            return 0;
        }

        int allowedProfileNumber = 0;
        if (prop.containsKey("license-type")) {
            try {
                allowedProfileNumber = Integer.valueOf(prop.getProperty("license-type").substring(0, 2));
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Can not read the 'license-type' property from license.txt for NOTIFYagent");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Can not read the 'license-type' property from license.txt for NOTIFYagent");
        }
        return allowedProfileNumber;

    }

    private int getActuallyProfileNumber() {
        File file = new File("../profiles");
        Collection<File> files = FileUtils.listFiles(file, new String[]{""}, true);
        int actuallyProfileNumber = files.size();
        return actuallyProfileNumber;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton6 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();

        jLabel1.setText("Profiles");
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jList1.setModel(mod);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setToolTipText("");
        jList1.setAutoscrolls(false);
        jList1.setName("jList1"); // NOI18N
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jButton6.setText("New");
        jButton6.setName("jButton6"); // NOI18N
        jButton6.setPreferredSize(new java.awt.Dimension(57, 23));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new java.awt.CardLayout());
        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 630, 550));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                        .addGap(26, 26, 26)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void valueChanged(javax.swing.event.ListSelectionEvent e) {
        int nr = jList1.getSelectedIndex();

        Properties prop = new Properties();
        try {
            prop.load(new FileInputStream(idxToFiles.get(nr)));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, idxToFiles.get(nr) + " can not be found" + ex.getMessage());
        }
        currentProfile = prop.getProperty("ProfileName");
//        System.out.println(prop.getProperty("Action"));
        if (prop.getProperty("Action").equalsIgnoreCase("TaskList")) {
            jPanel2.removeAll();
            jPanel2.setVisible(false);
            activePanel = new TaskList(prop, idxToFiles.get(nr));
            jPanel2.add(activePanel, "TaskList");
            jPanel2.setVisible(true);

        } else if (prop.getProperty("Action").startsWith("ForwardWF")) {
            jPanel2.removeAll();
            jPanel2.setVisible(false);
//            System.out.println("se genereaza");
            activePanel = new ForwardWF(prop, idxToFiles.get(nr));
            jPanel2.add(activePanel, "FowardWF");
            jPanel2.setVisible(true);
        } else if (prop.getProperty("Action").equalsIgnoreCase("NotifyUser")) {
            jPanel2.removeAll();
            jPanel2.setVisible(false);
            activePanel = new NotifyUser(prop, idxToFiles.get(nr));
            jPanel2.add(activePanel, "NotifyUser");
            jPanel2.setVisible(true);
        } else {
            jPanel2.removeAll();
            jPanel2.setVisible(false);
        }
    }

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        valueChanged(evt);
        // TODO add your handling code here:}//GEN-LAST:event_jList1ValueChanged
    }

        private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
            try {

                String number = String.valueOf(new File("../profiles").list().length);
                if (number.length() == 1) {
                    number = "00" + number;
                } else if (number.length() == 2) {
                    number = "0" + number;
                }
                File newProfile = new File("../profiles/profile_" + number + ".properties");
                newProfile.createNewFile();
                copyTemplateFile(number);
                idxToFiles.put(Integer.parseInt(number), "../profiles/profile_" + number + ".properties");
                mod.addElement(newProfile.getName().substring(0, newProfile.getName().indexOf(".")).substring(8) + " " + defaultValues.getProperty("ProfileName"));
                jList1.setSelectedIndex(new File("../profiles").list().length - 1);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Cannot create new Profile : " + ex.getMessage());
            }

        // TODO add your handling code here:}//GEN-LAST:event_jButton6ActionPerformed
    }

    public void copyTemplateFile(final String number) throws IOException {
        File curentProfile = new File(idxToFiles.get(jList1.getSelectedIndex()));
        copyInformation(curentProfile, new File("../profiles/profile_" + number + ".properties"));
    }

    private void copyInformation(File profile, File out) throws IOException {
        List<String> lines = new ArrayList<String>();
        try {
            try {
                BufferedReader br = new BufferedReader(new FileReader(profile));
                String line;
                while ((line = br.readLine()) != null) {
                    lines.add(line);
                }
            } catch (Exception ex) {
            }

            FileOutputStream fos = new FileOutputStream(out);

            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));

            for (String line : lines) {
                boolean found = false;
                for (String property : defaultValues.stringPropertyNames()) {
                    if (line.startsWith(property + "=")) {
                        bw.write(property + "=" + defaultValues.getProperty(property).replace("\\", "\\\\"));
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    bw.write(line);
                }
                bw.newLine();
            }
            bw.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "can not write in folder profiles(copyInformation) + " + ex.getMessage());
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void showProfileInList() {
        Properties prop = new Properties();
        Collection<File> files = FileUtils.listFiles(new File("../profiles"), null, true);        
        int count = 0;
        for (File f : files) {
            try {
                prop.load(new FileInputStream("../profiles/" + f.getName()));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Cann not File in FilesTabLast.java" + ex.getMessage());
            }
            mod.addElement(f.getName().substring(0, f.getName().indexOf(".")).substring(8) + " " + prop.getProperty("ProfileName"));
            idxToFiles.put(count, "../profiles/" + f.getName());
            profileNames.add(prop.getProperty("ProfileName"));
            count++;
        }
        jList1.setSelectedIndex(0);
    }

    public boolean save() {
        boolean find = false;
        Properties prop = new Properties();
        Properties currentProfile = new Properties();
        int currentProfileNumber = jList1.getSelectedIndex();
        try {
            currentProfile.load(new FileInputStream(idxToFiles.get(currentProfileNumber)));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Die Datei: " + idxToFiles.get(currentProfileNumber) + " gibt es nicht" + ex.getMessage());
        }
        int numberOfProfile = new File("../profiles").list().length;

        if (true) {
            if (activePanel.validationOk()) {
                try {
                    activePanel.save(currentProfile, idxToFiles.get(currentProfileNumber));
                    File file = new File(idxToFiles.get(currentProfileNumber));
                    DefaultListModel dml = ((DefaultListModel) jList1.getModel());
                    dml.setElementAt(file.getName().substring(0, file.getName().indexOf(".")).substring(8) + " " + currentProfile.getProperty("ProfileName"), currentProfileNumber);
                } catch (Exception ex) {
//                    System.out.println(ex);
//                    ex.printStackTrace();
                }
            } else {
                return false;
            }
        }
        return true;
    }

    public void showErrorMessage() {
        String errorMessage;
        if (System.getProperty("user.language").equalsIgnoreCase("de")) {
            errorMessage = "Ein Profil mit identischem Namen existiert bereits!";
        } else {
            errorMessage = "A profile with the same name already existing!";
        }
        JOptionPane.showMessageDialog(this, errorMessage);
    }

    public void showRestartMessage() {
        String errorMessage;
        if (System.getProperty("user.language").equalsIgnoreCase("de")) {
            errorMessage = "Sie müssen den Dienst neu starten, um die neue Konfiguration verwenden zu können.";
        } else {
            errorMessage = "You have to restart the service in order to use the new configuration.";
        }
        JOptionPane.showMessageDialog(this, errorMessage);
    }

    @Override
    public JPanel getJPanel() {
        return this;
    }

    @Override
    public String getTitle() {
        return title;
    }

    @Override
    public void setConfig(Config c) {
        config = c;
    }

//    public class ProfileNameExist extends javax.swing.JFrame {
//
//        private javax.swing.JButton jButton1;
//        private javax.swing.JButton jButton2;
//        private javax.swing.JLabel jLabel2;
//        private javax.swing.JLabel jLabel3;
//        private javax.swing.JTextField jTextField1;
//        public FilesTab obj;
//
//        public ProfileNameExist(FilesTab obj) {
//            jButton1 = new javax.swing.JButton();
//            jButton2 = new javax.swing.JButton();
//            jLabel1 = new javax.swing.JLabel();
//            jTextField1 = new javax.swing.JTextField();
//            jLabel2 = new javax.swing.JLabel();
//            jLabel3 = new javax.swing.JLabel();
//            setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
//            jButton1.setText("jButton1");
//            jButton1.setName("jButton1"); // NOI18N
//            jButton1.addActionListener(new java.awt.event.ActionListener() {
//
//                public void actionPerformed(java.awt.event.ActionEvent evt) {
//                    jButton1ActionPerformed(evt);
//                }
//            });
//            jButton2.setText("jButton2");
//            jButton2.setName("jButton2"); // NOI18N
//            jButton2.addActionListener(new java.awt.event.ActionListener() {
//
//                public void actionPerformed(java.awt.event.ActionEvent evt) {
//                    jButton2ActionPerformed(evt);
//                }
//            });
//            BufferedImage image;
//            ImageIcon icon;
//            try {
//                image = ImageIO.read(getClass().getResource("resources/favicon.png"));
//                icon = new ImageIcon(image);
//                this.setIconImage(icon.getImage());
//            } catch (IOException ex) {
//            }
//            jLabel1.setText("jLabel1");
//            jLabel1.setName("jLabel1"); // NOI18N
//            jTextField1.setName("jTextField1"); // NOI18N
//            jLabel2.setText("jLabel2");
//            jLabel2.setName("jLabel2"); // NOI18N
//            jLabel3.setText("jLabel3");
//            jLabel3.setName("jLabel3"); // NOI18N
//            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
//            getContentPane().setLayout(layout);
//            layout.setHorizontalGroup(
//                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel1).addGroup(layout.createSequentialGroup().addComponent(jLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(jTextField1).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18).addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))).addComponent(jLabel3)).addContainerGap(27, Short.MAX_VALUE)));
//            layout.setVerticalGroup(
//                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap().addComponent(jLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel3).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jButton1).addComponent(jButton2))).addComponent(jLabel2)).addGap(18, 18, 18)));
//            jTextField1.addKeyListener(new KeyAdapterStringOnly());
//            this.obj = obj;
//            pack();
//            loadName();
//        }
//
//        private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
//            this.setVisible(false);
//        }
//
//        private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
//            int numberOfProfile = new File("../profiles").list().length;
//            if (existProfileName(numberOfProfile)) {
//                String errorMessage;
//                if (System.getProperty("user.language").equalsIgnoreCase("de")) {
//                    errorMessage = "Ein Profil mit identischem Namen existiert bereits!";
//                } else {
//                    errorMessage = "A profile with the same name already existing!";
//                }
//                JOptionPane.showMessageDialog(this, errorMessage);
//                jTextField1.requestFocus();
//            } else {
//                String newProfileAdress = Integer.toString(numberOfProfile);
//                if (newProfileAdress.length() == 1) {
//                    newProfileAdress = "00" + newProfileAdress;
//                } else if (newProfileAdress.length() == 2) {
//                    newProfileAdress = "0" + newProfileAdress;
//                }
//                obj.actuelProfileAddress = "../profiles/profile_" + newProfileAdress + ".properties";
////                obj.barcodeReader.jTextField1.setText(jTextField1.getText());
//                obj.save();
//                obj.mod.addElement(newProfileAdress + " " + jTextField1.getText());
//                obj.jList1.setSelectedIndex(numberOfProfile);
//                this.setVisible(false);
//            }
//        }
//
//        public void loadName() {
//            try {
//                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
//            } catch (Exception ex) {
//            }
//            SwingUtilities.updateComponentTreeUI(this);
//            this.setLocation(500, 300);
//            Locale locale = Locale.getDefault();
//            ResourceBundle bundle = ResourceBundle.getBundle("de/arivato/otify/gui/resources/ProfileNameExist", locale);
//            this.setTitle(bundle.getString("titel"));
//            jLabel1.setText(bundle.getString("jLabel1.txt"));
//            jLabel3.setText(bundle.getString("jLabel3.txt"));
//            jLabel2.setText(bundle.getString("jLabel2.txt"));
//            jButton1.setText(bundle.getString("jButton1.txt"));
//            jButton2.setText(bundle.getString("jButton2.txt"));
//        }
//
//        public class KeyAdapterStringOnly extends KeyAdapter {
//
//            private String allowedRegex = "_";
//
//            public void keyReleased(KeyEvent e) {
//                String curText = ((JTextComponent) e.getSource()).getText();
//                curText = curText.replaceAll(allowedRegex, "");
//                ((JTextComponent) e.getSource()).setText(curText);
//            }
//        }
//
//        private boolean existProfileName(int i) {
//            Properties prop = new Properties();
//            boolean find = false;
//            while (i >= 0 && !find) {
//                String nummer = Integer.toString(i);
//                if (nummer.length() == 1) {
//                    nummer = "00" + nummer;
//                } else if (nummer.length() == 2) {
//                    nummer = "0" + nummer;
//                }
//                try {
//                    prop.load(new FileInputStream("../profiles/profile_" + nummer + ".properties"));
//                } catch (Exception ex) {
//                }
//                if (jTextField1.getText().equalsIgnoreCase(prop.getProperty("ProfileName"))) {
//                    find = true;
//                }
//                i--;
//            }
//            return find;
//        }
//    }
//    public class CreateNewProfile extends javax.swing.JFrame {
//
//        //"ReadBarcode", "ConvertTiff2Pdf", "SplitSortMerge"
//        String actionList[] = {"NotifyUser", "ForwardWFstart", "ForwardWFend", "ForwardWFsetUsers", "TaskList"};
//
//        /**
//         * Creates new form CreateNewProfile
//         */
//        public CreateNewProfile() {
//            if (ConfigApp.productName != null && ConfigApp.productName.toUpperCase().contains("NOTIFY")) {
//                actionList = new String[]{"NotifyUser", "TaskList"};
//            }
//            initComponents();
//            loadResources();
//
//        }
//
//        public void loadResources() {
//            BufferedImage image;
//            ImageIcon icon;
//            try {
//                image = ImageIO.read(getClass().getResource("resources/favicon.png"));
//                icon = new ImageIcon(image);
//                this.setIconImage(icon.getImage());
//            } catch (IOException ex) {
//            }
//            this.setLocation(200, 200);
//            this.setSize(420, 220);
//            this.setResizable(false);
//            this.setAlwaysOnTop(true);
//            try {
//                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
//            } catch (Exception ex) {
//            }
//            SwingUtilities.updateComponentTreeUI(this);
//            this.setLocation(500, 300);
//            Locale locale = Locale.getDefault();
//            ResourceBundle bundle = ResourceBundle.getBundle("de/arivato/notify/gui/resources/CreateNewProfile", locale);
//            this.setTitle(bundle.getString("titel"));
//            jLabel1.setText(bundle.getString("jLabel1.txt"));
//            jLabel3.setText(bundle.getString("jLabel3.txt"));
//            jLabel2.setText(bundle.getString("jLabel2.txt"));
//            jButton1.setText(bundle.getString("jButton1.txt"));
//            jButton2.setText(bundle.getString("jButton2.txt"));
//        }
//
//        /**
//         * This method is called from within the constructor to initialize the
//         * form. WARNING: Do NOT modify this code. The content of this method is
//         * always regenerated by the Form Editor.
//         */
//        @SuppressWarnings("unchecked")
//        // <editor-fold defaultstate="collapsed" desc="Generated Code">
//        private void initComponents() {
//
//            jLabel1 = new javax.swing.JLabel();
//            jLabel2 = new javax.swing.JLabel();
//            jLabel3 = new javax.swing.JLabel();
//            jTextField1 = new javax.swing.JTextField();
//            jComboBox1 = new javax.swing.JComboBox(actionList);
//            jButton1 = new javax.swing.JButton();
//            jButton2 = new javax.swing.JButton();
//
//            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
//
//            jLabel1.setText("jLabel1");
//            jLabel1.setName("jLabel1"); // NOI18N
//
//            jLabel2.setText("jLabel2");
//            jLabel2.setName("jLabel2"); // NOI18N
//
//            jLabel3.setText("jLabel3");
//            jLabel3.setName("jLabel3"); // NOI18N
//
//            jTextField1.setName("jTextField1"); // NOI18N
//
//            jComboBox1.setName("jComboBox1"); // NOI18N
//
//            jButton1.setText("jButton1");
//            jButton1.setName("jButton1"); // NOI18N
//            jButton1.addActionListener(new java.awt.event.ActionListener() {
//
//                public void actionPerformed(java.awt.event.ActionEvent evt) {
//                    jButton1ActionPerformed(evt);
//                }
//            });
//
//            jButton2.setText("jButton2");
//            jButton2.setName("jButton2"); // NOI18N
//            jButton2.addActionListener(new java.awt.event.ActionListener() {
//
//                public void actionPerformed(java.awt.event.ActionEvent evt) {
//                    jButton2ActionPerformed(evt);
//                }
//            });
//
//            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
//            getContentPane().setLayout(layout);
//            layout.setHorizontalGroup(
//                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(73, 73, 73).addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE).addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(73, Short.MAX_VALUE)).addGroup(layout.createSequentialGroup().addGap(21, 21, 21).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jLabel1).addContainerGap()).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel2).addComponent(jLabel3)).addGap(18, 18, 18).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE).addComponent(jComboBox1, 0, 211, Short.MAX_VALUE)).addGap(71, 71, 71)))));
//            layout.setVerticalGroup(
//                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(22, 22, 22).addComponent(jLabel1).addGap(18, 18, 18).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(jLabel2).addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabel3)).addGap(28, 28, 28).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(jButton1).addComponent(jButton2)).addContainerGap(26, Short.MAX_VALUE)));
//
//            pack();
//        }// </editor-fold>
//
//        private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
//            this.dispose();
//        }
//
//        private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
//            // suche nach identische ProfileName und Action
//            // Fals eine vorliegt, abbrechen
//            Properties prop = new Properties();
//            boolean find = false;
//            int numberOfProfile = new File("../profiles").list().length;
//            String number = "";
//            while (numberOfProfile >= 0) {
//                number = Integer.toString(numberOfProfile);
//                if (number.length() == 1) {
//                    number = "00" + number;
//                } else if (number.length() == 2) {
//                    number = "0" + number;
//                }
//                try {
//                    prop.load(new FileInputStream("../profiles/profile_" + number + ".properties"));
//                } catch (Exception ex) {
//                }
//                if (jTextField1.getText().equalsIgnoreCase(prop.getProperty("ProfileName"))
//                        && jComboBox1.getSelectedItem().toString().equalsIgnoreCase(prop.getProperty("Action"))) {
//                    find = true;
//                    break;
//                }
//                numberOfProfile--;
//            }
//            if (find) {
//                String errorMessage;
//                if (System.getProperty("user.language").equalsIgnoreCase("de")) {
//                    errorMessage = "Ein Profil mit identischem Namen existiert bereits!";
//                } else {
//                    errorMessage = "A profile with the same name already existing!";
//                }
//                JOptionPane.showMessageDialog(this, errorMessage);
//                jTextField1.requestFocus();
//            } else {
//                // Erzeuge ein Profile_xxx.properties mit ProfileName und Aktion
//                number = String.valueOf(new File("../profiles").list().length);
//                if (number.length() == 1) {
//                    number = "00" + number;
//                } else if (number.length() == 2) {
//                    number = "0" + number;
//                }
////                Properties newProperties = new Properties();
////                try {
////                    File newProfile = new File("../profiles/profile_" + number + ".properties");
////                    newProfile.createNewFile();
////
////                    defaultValues.setProperty("Action", jComboBox1.getSelectedItem().toString());
////                    //TODO: for new profile to add all the things
////                    copyTemplateFile(number);
////
//////                    newProperties.store(new FileOutputStream("../profiles/profile_" + number + ".properties"), null);
////                    idxToFiles.put(Integer.parseInt(number), "../profiles/profile_" + number + ".properties");
////                    mod.addElement(newProfile.getName().substring(0, newProfile.getName().indexOf(".")).substring(8) + " " + defaultValues.getProperty("ProfileName"));
////                } catch (Exception ex) {
////                    JOptionPane.showMessageDialog(this, "Cannot create new Profile : " + ex.getMessage());
////                }
//                // Selectiere die jList.select auf neue Profile und beende das CreateNewProfile.java 
//                jList1.setSelectedIndex(new File("../profiles").list().length - 1);
//                this.dispose();
//            }
//        }
//        private javax.swing.JButton jButton1;
//        private javax.swing.JButton jButton2;
//        private javax.swing.JComboBox jComboBox1;
//        private javax.swing.JLabel jLabel1;
//        private javax.swing.JLabel jLabel2;
//        private javax.swing.JLabel jLabel3;
//        private javax.swing.JTextField jTextField1;
//        // End of variables declaration
//
//    }
}
