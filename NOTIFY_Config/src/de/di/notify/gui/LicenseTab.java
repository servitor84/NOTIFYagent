/*
 * LicenseTab.java
 *
 * Created on 13. November 2008, 10:32
 */
package de.di.notify.gui;

import de.di.license.check.ELOException;
import de.di.license.check.ELOLicenseChecker;
import de.di.license.check.LicenseException;
import de.di.license.check.LicenseKey;
import de.di.notify.gui.Config.Property;
import de.di.dokinform.elo.ELOClient;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
//import de.arivato.notify.gui.ProductInfo;
import java.io.InputStream;
import java.util.ResourceBundle;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author  A. Sopicki
 */
public class LicenseTab extends javax.swing.JPanel implements ConfigTab {

    private String title = "License";
    //private static final String bundleName; //= "notify/de/di/notify/gui/resources/LicenseTab";
    private Config config = null;
    private java.util.Map<String, String> productInfo = null;
    private ResourceBundle bundle; //= ResourceBundle.getBundle(bundleName);
    private boolean setup = false;
    private volatile LicenseChecker checker = null;
    private ELOClient client;
    /** Creates new form LicenseTab */
    public LicenseTab() {
        
        File file = new File("notify/de/di/notify/gui/resources/LicenseTab");
        try {
            FileInputStream fis = new FileInputStream(file);
            bundle = ResourceBundle.getBundle("notify/de/di/notify/gui/resources/LicenseTab");
        } catch (FileNotFoundException ex) {
            bundle = ResourceBundle.getBundle("contractmanager/de/di/notify/gui/resources/LicenseTab");
        }

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(de.di.notify.gui.ConfigApp.class).getContext().
                getResourceMap(LicenseTab.class);

        title = resourceMap.getString("tabTitle.text");

        initComponents();
        loadProductInfo();
        //bundle = ResourceBundle.getBundle(bundleName);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        licensePanel = new javax.swing.JPanel();
        licenseLabel = new javax.swing.JLabel();
        changeLicenseButton = new javax.swing.JButton();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(de.di.notify.gui.ConfigApp.class).getContext().getResourceMap(LicenseTab.class);
        licensePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("licensePanel.border.title"))); // NOI18N
        licensePanel.setName("licensePanel"); // NOI18N

        licenseLabel.setText(resourceMap.getString("licenseLabel.text")); // NOI18N
        licenseLabel.setName("licenseLabel"); // NOI18N

        changeLicenseButton.setText(resourceMap.getString("changeLicenseButton.text")); // NOI18N
        changeLicenseButton.setName("changeLicenseButton"); // NOI18N
        changeLicenseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeLicenseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout licensePanelLayout = new javax.swing.GroupLayout(licensePanel);
        licensePanel.setLayout(licensePanelLayout);
        licensePanelLayout.setHorizontalGroup(
            licensePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(licensePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(licensePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(licenseLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                    .addComponent(changeLicenseButton))
                .addContainerGap(161, Short.MAX_VALUE))
        );
        licensePanelLayout.setVerticalGroup(
            licensePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(licensePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(changeLicenseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(licenseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(licensePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(licensePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void changeLicenseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeLicenseButtonActionPerformed
    java.io.File f = getSelectedFile();
    if (f != null) {
        try {
            if (!f.exists()) {
                throw new Exception(bundle.getString("missingFile.text"));
            }

            if (!f.canRead()) {
                throw new Exception(bundle.getString("noReadAccess.text"));
            }

            java.io.File licenseFile = new java.io.File("conf/license.txt");
            java.io.File configDir = new java.io.File(licenseFile.getParent());

            if (licenseFile.exists() && !licenseFile.canWrite()) {
                String msg = bundle.getString("noWriteAccess.text");
                msg = java.text.MessageFormat.format(msg, licenseFile.getAbsolutePath());
                throw new Exception(msg);
            } else if (!licenseFile.exists() && !configDir.canWrite()) {
                String msg = bundle.getString("noWriteAccess.text");
                msg = java.text.MessageFormat.format(msg, licenseFile.getAbsolutePath());
                throw new Exception(msg);
            }

            try {
                java.io.FileInputStream ins = null;
                java.io.FileOutputStream outs = null;

                java.nio.channels.FileChannel iChannel = null;
                java.nio.channels.FileChannel oChannel = null;

                ins = new java.io.FileInputStream(f);
                outs = new java.io.FileOutputStream(licenseFile);

                iChannel = ins.getChannel();
                oChannel = outs.getChannel();

                oChannel.transferFrom(iChannel, 0, iChannel.size());

                iChannel.close();
                oChannel.close();
                showLicenseInformation();
            } catch (java.io.IOException ioex) {
                throw new Exception(bundle.getString("copyFailed.text"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(),
                    bundle.getString("errorDialogTitle.text"),
                    JOptionPane.ERROR_MESSAGE);
        }
    }
}//GEN-LAST:event_changeLicenseButtonActionPerformed

    @Override
    public JPanel getJPanel() {
        return this;
    }

    @Override
    public String getTitle() {
        return title;
    }

    @Override
    public void setConfig(Config c) {
        config = c;
        setup = true;
        showLicenseInformation();
        setup = false;
    }

    private java.io.File getSelectedFile() {
        java.io.File f = null;

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFile();
        }

        return null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changeLicenseButton;
    private javax.swing.JLabel licenseLabel;
    private javax.swing.JPanel licensePanel;
    // End of variables declaration//GEN-END:variables

    private void showLicenseInformation() {
        
        if (config.getProperty(Property.IndexServerURL, "").length() == 0) {
            licenseLabel.setText(bundle.getString("warning.elo.text"));
            return;
        }

        if (checker == null) {
            licenseLabel.setText(bundle.getString("check.license.text"));
            changeLicenseButton.setEnabled(false);

            checker = new LicenseChecker(!setup);
            checker.start();
        }
    }

    private void loadProductInfo() {
        productInfo = new java.util.Hashtable<String, String>();
        
        InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream("notify/de/di/notify/resources/product.properties");
        if(in == null) {
            in = Thread.currentThread().getContextClassLoader().getResourceAsStream("contractmanager/de/di/notify/resources/product.properties");
        }                        

        //InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream("notify/de/di/notify/resources/product.properties");

        if (in != null) {
            ProductInfo.readProductInfo(in, productInfo);
        }
    }

    private class LicenseChecker extends Thread {

        private boolean warnOnLicenseChange = false;

        LicenseChecker(boolean warn) {
            warnOnLicenseChange = warn;
        }

        @Override
        public void run() {
            try {
                java.io.File licenseFile = new java.io.File("../conf/license.txt");
//        System.out.println(licenseFile.exists());
//        System.out.println(licenseFile.length());
                if (!licenseFile.exists() || licenseFile.length() == 0) {
//            System.out.println("ich werfe Exception");
                    throw new Exception();
                }

                LicenseKey key = LicenseKey.readFromFile(licenseFile);
//        System.out.println("ich ich komme bis LicenseKey.readFromFile()");
                ELOLicenseChecker checker = new ELOLicenseChecker(productInfo.get("product"));
//        System.out.println("ich komme bis ELOLicenseChecker");
                checker.setSettings(config);
//        System.out.println("ich komme bis checker.set");
                checker.check(key, checker.getRounds());
//        System.out.println("ich komme nach checker.check()");
                StringBuilder builder = new StringBuilder();
                builder.append("<html>Lizenznehmer: ");
                builder.append(key.getAttribute("client").getValue());
                builder.append("<br />Gültig bis: ");
                builder.append(java.text.DateFormat.getDateInstance().format(key.getExpirationDate()));
                builder.append("<br />ERP-System: ");
                builder.append(key.getAttribute("ERP-system").getValue());
                builder.append("<br />Lizenzart: ");
                builder.append(key.getAttribute("license-type").getValue());
                builder.append("<br />Dokumenten Management System: ");
                builder.append(key.getAttribute("ELO-version").getValue());
                builder.append("</html>");
                licenseLabel.setText(builder.toString());
            } catch (ELOException eloex) {
                licenseLabel.setText(bundle.getString("warning.elo.text"));
                changeLicenseButton.setEnabled(true);
                checker = null;
                return;
            } catch (LicenseException lex) {
//        System.out.println(lex.getMessage());
                String msg = bundle.getString("warning.license.text");
                licenseLabel.setText(bundle.getString("license.violation.text"));
                if (warnOnLicenseChange) {
                    JOptionPane.showMessageDialog(LicenseTab.this, msg);
                }
                changeLicenseButton.setEnabled(true);
                checker = null;
                return;
//            lex.printStackTrace();
            } catch (Exception ex) {
                licenseLabel.setText(bundle.getString("license.violation.text"));
                changeLicenseButton.setEnabled(true);
                checker = null;
                return;
//            ex.printStackTrace();
            }

            if (warnOnLicenseChange) {
                String msg = bundle.getString("warning.restart.text");
                JOptionPane.showMessageDialog(LicenseTab.this, msg);
            }

            changeLicenseButton.setEnabled(true);
            checker = null;
        }
    }
}
